#include <WiFi.h>
#include <PubSubClient.h>
#include <Stepper.h>

// Configuración Wi-Fi
const char* ssid = "Rex";
const char* password = "x8am9fqb";

// Configuración MQTT
const char* mqtt_server = "192.168.19.61";  // Dirección IP del broker MQTT
const int mqtt_port = 1883;

// Pines del motor paso a paso y configuración
#define IN1 32
#define IN2 33
#define IN3 25
#define IN4 26
const int stepsPerRevolution = 2048;

// Inicializar el motor paso a paso
Stepper myStepper(stepsPerRevolution, IN1, IN3, IN2, IN4);

// Configuración de velocidad del motor (en RPM)
const int motorSpeed = 18;

// Variables para MQTT
WiFiClient espClient;
PubSubClient client(espClient);

// Función para configurar Wi-Fi
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando a ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado");
}

// Función para manejar mensajes MQTT
void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  if (message == "true") {
    if (String(topic) == "motor/derecha") {
      Serial.println("Recibido: motor/derecha TRUE");
      myStepper.setSpeed(motorSpeed);               // Configurar velocidad
      myStepper.step(stepsPerRevolution);          // Giro horario
    } else if (String(topic) == "motor/izquierda") {
      Serial.println("Recibido: motor/izquierda TRUE");
      myStepper.setSpeed(motorSpeed);               // Configurar velocidad
      myStepper.step(-stepsPerRevolution);         // Giro antihorario
    } else if (String(topic) == "garra") {
      Serial.println("Recibido: garra TRUE");
      // Aquí puedes llamar la función para mover la garra, si existe
    }
  }
}

// Función para reconectar al broker MQTT
void reconnect() {
  while (!client.connected()) {
    Serial.print("Intentando conexión MQTT...");
    if (client.connect("ESP32Client")) {  // Conexión sin usuario ni contraseña
      Serial.println("Conectado al broker");
      client.subscribe("motor/derecha");
      client.subscribe("motor/izquierda");
      client.subscribe("garra");
    } else {
      Serial.print("Fallo, rc=");
      Serial.print(client.state());
      Serial.println(" Intentando de nuevo en 5 segundos");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  // Inicializar el motor paso a paso
  myStepper.setSpeed(motorSpeed);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
